# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(default_visibility = ["//visibility:public"])

load("@build_bazel_rules_typescript//:defs.bzl", "ts_library", "ts_devserver")
load("@io_bazel_rules_closure//closure:defs.bzl", "closure_js_library", "closure_js_binary")
load("//internal:build_defs.bzl", "closure_ts_binary")
load("//examples/app:internal_node_module.bzl", "internal_node_module")

STATIC_FILES = [
    "index.html",
    ":angular.js",   
    "//examples/app/hello-world:static-files",
]

ts_library(
    name = "ts_library",
    srcs = ["main.ts"],
    deps = ["//examples/app/hello-world"],
)

# The devserver uses RequireJS for module loading so we need to instruct it 
# that require("angular") commands should load AngularJS from the window.
internal_node_module(
    name = "angularjs_shim_requirejs",
    import_path = "angular",
    main = "angularjs_shim.requirejs.js",
)

# Create a live-reload enable development server:
#
# npm run devserver
# ibazel run //examples/angular:devserver
ts_devserver(
    name = "devserver",
    serving_path = "/bundle.js",
    static_files = STATIC_FILES,
    deps = [":angularjs_shim_requirejs", ":ts_library"],
    entry_module = "build_bazel_rules_typescript/examples/app/main",
)

# We do not want closure to compile angular.js, and instead will serve angular.min.js.
# Serving this file makes angular availible on the window as a global variable.
# @types/angular defines angularjs as a CommonJS module with an import path of 'angular'
# The shim exports the global variable to make it importable from the import path.
internal_node_module(
    name = "angularjs_shim_commonjs",
    import_path = "angular",
    main = "angularjs_shim.commonjs.js",
)

closure_js_library(
    name = "angularjs_externs",
    srcs = ["//:node_modules/google-closure-compiler/contrib/externs/angular-1.6.js"],
)

# Create a closure minified production bundle.
closure_ts_binary(
    name = "bundle",
    defs = [
        "--jscomp_off=checkTypes",
        # Needed to process the shim's commonJS module.
        "--process_common_js_modules",
    ],
    deps = [
        ":angularjs_externs",
        ":angularjs_shim_commonjs",
        ":ts_library",
    ],
)

# Needed because the devserver only loads static files that appear under this
# package.
genrule(
    name = "angular_js",
    srcs = ["//:node_modules/angular/angular.js"],
    outs = ["angular.js"],
    cmd = "cp $< $@",
)

# Create a production server to serve the bundle.
#
# npm run prodserver
# ibazel run //examples/angular:devserver
ts_devserver(
    name = "prodserver",
    # :bundle.js produced by closure_ts_binary
    static_files = STATIC_FILES + [":bundle.js"],
)

ts_library(
    name = "e2e",
    testonly = 1,
    srcs = ["main_e2e_test.ts"],
)
